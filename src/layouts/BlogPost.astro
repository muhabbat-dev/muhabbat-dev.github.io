---
import type { CollectionEntry } from "astro:content";
import FormattedDate from "@/components/FormattedDate";
import MainLayout from "@/layouts/main";
import Tag from "@/components/Tag";
import type { MarkdownHeading } from "astro";
import { Image } from "astro:assets";

type Props = {
  id: CollectionEntry<"blog">["id"];
  data: CollectionEntry<"blog">["data"];
  headings: MarkdownHeading[];
  readTime: string;
  keywords: string[];
  slug: string;
};

const { data, readTime, slug } = Astro.props;
const { title, description, pubDate, heroImage, tags } = data;
---

<MainLayout
  title=`${title}`
  meta={[
    {
      name: "description",
      content: "muhabbat.dev is my personal portfolio and blog website.",
    },
    {
      name: "keywords",
      content:
        "full-stack developer, devops engineer, react js developer, node js developer, flutter developer, laravel developer, aws expert, mern stack developer, javascript developer, front-end developer, back-end developer, android developer, ios developer, cross-platform developer, programmer, tech & IT",
    },
  ]}
  ogMeta={[
    { property: "og:title", content: "Muhabbat Dev | Blog" },
    {
      property: "og:description",
      content:
        " I'm a Full Stack Web and Mobile Developer from France. I'm passionate about building new products and learning new technology",
    },
    { property: "og:type", content: "website" },
    {
      property: "og:image",
      content:
        "https://muhabbat-dev.github.io/public/assets/images/profile5.png",
    },
    { property: "og:url", content: "https://muhabbat.dev" },
  ]}
  headCard={{
    headline: title,
    image: heroImage.src,
    url: data.title,
    author: {
      name: "Muhabbay Ali",
    },
    publisher: {
      type: "Organization",
      name: "Muhabbat Ali",
      logo: {
        type: "ImageObject",
        url: "https://muhabbat.dev/assets/images/profile5.png",
      },
      datePublished: pubDate.toLocaleString(),
      description: description,
      url: Astro.url.toString(),
    },
  }}
>
  <article
    class="px-5 sm:mx-auto sm:max-w-2xl lg:px-0 antialiased md:max-w-6xl mt-4 overflow-hidden md:overflow-visible"
  >
    <header class="mb-3 flex flex-col justify-center items-center gap-6">
      <div class="flex flex-col gap-2 dark:text-white">
        <div class="flex items-center justify-center gap-x-1">
          <p class="text-center text-sm text-opacity-50">
            Published <FormattedDate date={pubDate} />
          </p>
          <p class="text-center text-sm text-opacity-50 font-bold">
            - {readTime}
          </p>
        </div>
        <h1 class="text-center text-4xl md:text-6xl md:pb-2.5 font-semibold">
          {title}
        </h1>
      </div>

      <div
        class="flex flex-wrap justify-center items-center gap-2 gap-y-4 md:gap-5"
      >
        {tags.map((tag: string) => <Tag tag={tag} />)}
      </div>
    </header>

    <>
      {
        heroImage && (
          <Image
            src={heroImage}
            width={1000}
            height={500}
            quality={100}
            format="jpg"
            loading="eager"
            class="rounded-md w-full max-h-[300px]  md:max-h-[500px] my-8 object-cover"
            alt={`img of ${title}`}
          />
        )
      }
    </>

    <hr />

    <div>
      <slot />
    </div>
  </article>
</MainLayout>

<script>
  const fnObserver = () => {
    function handleIntersection(
      entries: IntersectionObserverEntry[],
      observer: IntersectionObserver,
    ) {
      entries.forEach((entry) => {
        const index = document.querySelector(
          `aside a[href="#${entry.target.id}"]`,
        );

        if (entry.isIntersecting) {
          index?.classList.remove("bg-slate-200", "dark:bg-slate-800"); // remove bg
          index?.classList.add(
            "bg-orange-600",
            "dark:bg-orange-700",
            "text-white",
            "font-bold",
            "transition-colors",
            "duration-200",
          );
        } else {
          index?.classList.add("bg-slate-200", "dark:bg-slate-800"); // add bg
          index?.classList.remove(
            "bg-orange-600",
            "dark:bg-orange-700",
            "text-white",
            "font-bold",
            "transition-colors",
            "duration-200",
          );
        }
      });
    }

    const headings = document.querySelectorAll(
      "div.prose h1, div.prose h2, div.prose h3, div.prose h4, div.prose h5, div.prose h6",
    );

    const options = {
      root: null,
      rootMargin: " 15% 0px 0% 0px ",
      threshold: 1,
    };

    const observer = new IntersectionObserver(handleIntersection, options);

    headings.forEach((heading) => {
      observer.observe(heading);
    });
  };
  fnObserver();
  document.addEventListener("astro:after-swap", fnObserver);
</script>
